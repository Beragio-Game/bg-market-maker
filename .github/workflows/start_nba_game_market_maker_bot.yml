# This is a basic workflow that is manually triggered

name: Start an NBA game market maker bots

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      environment:
        description: 'Environment where deploy'
        type: choice
        default: "prod"
        options:
          - "prod"
          - "staging"
        required: true

      game_id:
        description: 'Game Id: Id of the game from odds API'
        type: string
        required: true
      
      token_id_team_a:
        description: 'Token Id team A: Id of the conditional token for the winning of the Team A'
        type: string
        required: true
      
      token_id_team_b:
        description: 'Token Id team B: Id of the conditional token for the winning of the Team B'
        type: string
        required: true
      
      team_a:
        description: 'Team A: Team name related to the conditional token A'
        type: string
        required: true
      
      team_b:
        description: 'Team B: Team name related to the conditional token B'
        type: string
        required: true
      
      sport:
        description: 'Type of sport'
        type: choice
        default: "basketball_nba"
        options:
          - "basketball_nba"
          - "basketball_nba_championship_winner"
          - "basketball_ncaab"
          - "basketball_euroleague"
        required: true
      
      region:
        description: 'Region of the match'
        type: choice
        default: "us"
        options:
          - "us"
          - "uk"
          - "eu"
          - "au"
        required: true
      
      market:
        description: 'Type of market'
        type: choice
        default: "h2h"
        options:
          - "h2h"
          - "spreads"
        required: true


jobs:
  bots_creation:
    runs-on: ubuntu-latest

    steps:
      - name: Sets env vars for prod env
        run: |
          echo "AWS_ACCESS_KEY_ID= ${{ secrets.A1_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY= ${{ secrets.A1_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION= eu-west-2" >> $GITHUB_ENV
          echo "KUBE_CONFIG_DATA= ${{ secrets.PROD_KUBE_CONFIG_DATA }}" >> $GITHUB_ENV
          echo "GH_ACCESS_TOKEN= ${{ secrets.GH_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY= polymarket" >> $GITHUB_ENV
          echo "IMAGE_TAG= mmk_nba_game_${{ github.event.inputs.game_id }}_${{ github.sha }}_main" >> $GITHUB_ENV
        if: ${{ github.event.inputs.environment == "prod" }}

      - name: Sets env vars for staging env
        run: |
          echo "AWS_ACCESS_KEY_ID= ${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY= ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION= eu-west-2" >> $GITHUB_ENV
          echo "KUBE_CONFIG_DATA= ${{ secrets.STAGING_KUBE_CONFIG_DATA }}" >> $GITHUB_ENV
          echo "GH_ACCESS_TOKEN= ${{ secrets.GH_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY= polymarket" >> $GITHUB_ENV
          echo "IMAGE_TAG= mmk_nba_game_${{ github.event.inputs.game_id }}_${{ github.sha }}" >> $GITHUB_ENV
        if: ${{ github.event.inputs.environment != "prod" }}

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure git
        run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push keeper image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

        run: |
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create kubernetes files
        env:
          GAME_ID: ${{ github.event.inputs.game_id }}
          TOKEN_ID_TEAM_A: ${{ github.event.inputs.token_id_team_a }}
          TOKEN_ID_TEAM_B: ${{ github.event.inputs.token_id_team_b }}
          TEAM_A: ${{ github.event.inputs.team_a }}
          TEAM_B: ${{ github.event.inputs.team_b }}
          SPORT: ${{ github.event.inputs.sport }}
          REGION: ${{ github.event.inputs.region }}
          MARKET: ${{ github.event.inputs.market }}
          BANDS_FILE: "bands.json"
          ENVIRONMENT: ${{ github.event.inputs.environment }}

        run: |
          ./create_nba_game_bot_k8s_deployment.sh $BANDS_FILE $TOKEN_ID_TEAM_A $TOKEN_ID_TEAM_B $SPORT $REGION $MARKET $GAME_ID "$TEAM_A" "$TEAM_B" $IMAGE_TAG $ENVIRONMENT

      - name: Deploy market maker bot for team A
        uses: ckuroki/kubectl-aws-eks@v1
        env:
          FILE_NAME: mmk-game-${{ github.event.inputs.game_id }}-team-a.yaml
        
        with:
          args: apply -f $FILE_NAME

      - name: Deploy market maker bot for team B
        uses: ckuroki/kubectl-aws-eks@v1
        env:
          FILE_NAME: mmk-game-${{ github.event.inputs.game_id }}-team-b.yaml
        
        with:
          args: apply -f $FILE_NAME

      - name: Bots deployed
        run: |
          echo "Game ${{ github.event.inputs.game_id }} bot deployed, ${{ github.event.inputs.team_a }} VS ${{ github.event.inputs.team_b }}."
          echo "Team A instance: mmk-game-${{ github.event.inputs.game_id }}-team-a"
          echo "Team B instance: mmk-game-${{ github.event.inputs.game_id }}-team-b"
