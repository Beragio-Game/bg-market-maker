# This is a basic workflow that is manually triggered

name: Start a FPMM Production Bot

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      bot_id:
        description: 'Bot ID (11+ characters, unique)'
        type: string
        required: true
      
      token_id_team_a:
        description: 'Token ID A: ID of the first conditional token in the set'
        type: string
        required: true
      
      token_id_team_b:
        description: 'Token ID A: ID of the second conditional token in the set'
        type: string
        required: true
      
      group:
        description: 'Market group number'
        type: choice
        default: "1"
        options:
          - "1"
          - "2"
          - "3"
          - "4"
          - "5"
        required: true
      
      fpmm_address:
        description: 'FPMM address for price reference'
        type: string
        required: true
      
      bands_config:
        description: 'Bands config to use'
        type: choice
        default: "bands.json"
        options:
          - "bands.json"
        required: true

jobs:
  bots_creation_prod:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.A1_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.A1_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-2
      KUBE_CONFIG_DATA: ${{ secrets.PROD_KUBE_CONFIG_DATA }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      ECR_REPOSITORY: polymarket
      IMAGE_TAG: mmk_game_${{ github.event.inputs.bot_id }}_${{ github.sha }}_main

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push keeper image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

        run: |
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create kubernetes files
        env:
          BANDS_FILE: ${{ github.event.inputs.bands_config }}
          TOKEN_ID_TEAM_A: ${{ github.event.inputs.token_id_team_a }}
          TOKEN_ID_TEAM_B: ${{ github.event.inputs.token_id_team_b }}
          BOT_ID: ${{ github.event.inputs.bot_id }}
          ENVIRONMENT: "prod"
          GROUP: ${{ github.event.inputs.group }}
          PRICE_FEED_SOURCE: "fpmm"
          FPMM_ADDRESS: ${{ github.event.inputs.fpmm_address }}

        run: |
          ./create_event_bot_k8s_deployment.sh $BANDS_FILE $TOKEN_ID_TEAM_A $TOKEN_ID_TEAM_B $BOT_ID $IMAGE_TAG $ENVIRONMENT $GROUP $PRICE_FEED_SOURCE $FPMM_ADDRESS

      - name: Deploy market maker bot for team A
        uses: ckuroki/kubectl-aws-eks@v1
        env:
          FILE_NAME: mmk-game-${{ github.event.inputs.bot_id }}-team-a.yaml
        
        with:
          args: apply -f $FILE_NAME

      - name: Deploy market maker bot for team B
        uses: ckuroki/kubectl-aws-eks@v1
        env:
          FILE_NAME: mmk-game-${{ github.event.inputs.bot_id }}-team-b.yaml
        
        with:
          args: apply -f $FILE_NAME

      - name: Bots deployed
        run: |
          echo "Game ${{ github.event.inputs.bot_id }} bot deployed, ${{ github.event.inputs.team_a }} VS ${{ github.event.inputs.team_b }}."
          echo "Team A instance: mmk-game-${{ github.event.inputs.bot_id }}-team-a"
          echo "Team B instance: mmk-game-${{ github.event.inputs.bot_id }}-team-b"
